@page "/prs"
@using GymApp.Services.ExerciseService
@using GymApp.Models
@using GymApp.Services.LocalStorage
@inject LocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject IExerciseService ExerciseService
@rendermode InteractiveServer

<div class="dashboard_container">
    @if (isLoading)
    {
        <p>Loading...</p>
    }
    else if (username != null)
    {
        <h1>Welcome, @username!</h1>
        <div style="width:fit-content; margin:0 auto;">
            <button @onclick="GoToDashboard" style="margin:auto 10px 10px; border: none; border-radius: 8px; background-color: rgb(2, 191, 2); color:white">Back To Dashboard</button>
        </div>

        <!-- Week Calendar -->
        <div class="week-calendar">
            @if (exerciseEntries.Any())
            {
                <ul>
                    @foreach (Exercise entry in exerciseEntries.OrderBy(e => e.Date))
                    {
                        <li>
                            <h3>@entry.Name</h3>
                            <h5 class="history-date">@entry.Date</h5>
                            @if (entry.Type.ToString() == "Lift")
                            {
                                <p>@entry.Weight lbs for @entry.Reps reps</p>
                            }
                            else if (entry.Type.ToString() == "Cardio")
                            {
                                <p>@entry.Distance miles in @entry.Time minutes</p>
                            }
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No Personal Records</p>
            }
        </div>
    }
</div>

@code {
    private string? username;
    private int userId;
    private bool isLoading = true;

    // Inputs for Lift Exercise
    private string liftName = string.Empty;
    private int liftWeight;
    private int liftReps;

    // Inputs for Cardio Exercise
    private string cardioName = string.Empty;
    private int cardioTime;
    private double cardioDistance;

    private List<Exercise>? exerciseEntries = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                username = await LocalStorage.GetItemAsync("username");
                var token = await LocalStorage.GetItemAsync("jwt_token");
                var userIdString = await LocalStorage.GetItemAsync("userId");
                userId = int.Parse(userIdString);

                if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(username))
                {
                    Navigation.NavigateTo("/login");
                    return;
                }

                exerciseEntries = await ExerciseService.GetAllExercisesAsync(userId);
                if(exerciseEntries == null)
                {
                    exerciseEntries = new();
                }
                // find unique exercises names
                // for each unique exercise name, find the max weight or min time
                var liftList = new List<Exercise>();
                var cardioList = new List<Exercise>();
                liftList = exerciseEntries.Where(e => e.Type == ExerciseType.Lift).GroupBy(e => e.Name).Select(group => group.OrderByDescending(e => e.Weight).First()).ToList();
                cardioList = exerciseEntries.Where(e => e.Type == ExerciseType.Cardio).GroupBy(e => (e.Name, e.Distance)).Select(group => group.OrderByDescending(e => e.Time).Last()).ToList();
                exerciseEntries = cardioList;
                exerciseEntries.AddRange(liftList);
                //cardioList = exerciseEntries.GroupBy(e => e.Name).Select(group => group.OrderByDescending(e => e.Weight).Where(e => e.Type == ExerciseType.Lift).First()).ToList(); *@
                isLoading = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task AddLiftExercise()
    {
        if (liftWeight <= 0 || liftReps <= 0)
        {
            // Show error message
            return;
        }
        Exercise newExercise = new(userId, liftName, ExerciseType.Lift, weight: liftWeight, reps: liftReps);
        exerciseEntries.Add(newExercise);
        Exercise? result = await ExerciseService.AddExerciseAsync(newExercise);

        // Clear inputs
        liftWeight = 0;
        liftReps = 0;
        liftName = string.Empty;

        await Task.CompletedTask;

    }

    private void GoToDashboard() {
        Navigation.NavigateTo("/dashboard");
    }
    private async Task AddCardioExercise()
    {
        if (cardioTime <= 0 || cardioDistance <= 0)
        {
            // Show error message
            return;
        }
        Exercise newExercise = new(userId, cardioName, ExerciseType.Cardio, time: cardioTime, distance: cardioDistance);
        exerciseEntries.Add(newExercise);
        Exercise? result = await ExerciseService.AddExerciseAsync(newExercise);

        // Clear inputs
        cardioTime = 0;
        cardioDistance = 0;
        cardioName = string.Empty;

        await Task.CompletedTask;
    }
}
