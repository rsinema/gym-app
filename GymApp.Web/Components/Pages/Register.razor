@page "/register"
@using GymApp.Services.UserService
@using GymApp.Models
@inject NavigationManager Navigation
@inject IUserService UserService
@rendermode InteractiveServer

<div class="register-container">
    <h2>Register</h2>

    <form @onsubmit="HandleRegister">
        <div class="form-group">
            <label for="username">Username</label>
            <input id="username" type="text" @bind="newUser.Username" class="form-control" />
            @if (showUsernameError)
            {
                <p class="validation-message">Username is required.</p>
            }
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <input id="password" type="password" @bind="newUser.Password" class="form-control" />
            @if (showPasswordError)
            {
                <p class="validation-message">Password is required.</p>
            }
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <input id="confirmPassword" type="password" @bind="confirmPassword" class="form-control" />
            @if (showConfirmPasswordError)
            {
                <p class="validation-message">Passwords do not match.</p>
            }
        </div>
        
        <button type="submit" class="btn btn-secondary">Register</button>
    </form>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="error-message">@errorMessage</p>
    }
</div>

@code {
    private User newUser = new(0, string.Empty, string.Empty);
    private string confirmPassword;
    private string errorMessage;
    private bool showUsernameError;
    private bool showPasswordError;
    private bool showConfirmPasswordError;

    private async Task HandleRegister()
    {
        Console.Write("we are here\n");
        showUsernameError = string.IsNullOrEmpty(newUser.Username);
        showPasswordError = string.IsNullOrEmpty(newUser.Password);

        showConfirmPasswordError = newUser.Password != confirmPassword;

        if (showUsernameError || showPasswordError || showConfirmPasswordError )
        {
            errorMessage = "Please fill in all required fields correctly.";
            return;
        }
        var dict = await UserService.RegisterUser(newUser.Username, newUser.Password);
        Console.WriteLine(dict.GetValueOrDefault("jwt"));
        if (dict.ContainsKey("jwt"))
        {
            Navigation.NavigateTo("/home");
            Console.Write("we did something\n");
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }
}
